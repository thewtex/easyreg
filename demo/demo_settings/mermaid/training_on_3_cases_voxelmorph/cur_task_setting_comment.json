{
    "dataset": {
        "img_after_resize": "Important, the image resolution that models actually work on, the images will be first resampled to this resolution, set [-1,-1,-1] if take the original image resolution",
        "max_num_for_loading": "the max number of pairs to be loaded, set -1 if there is no constraint,[max_train, max_val, max_test, max_debug]",
        "load_training_data_into_memory": "when train network, load all training sample into memory can relieve disk burden",
        "spacing_to_refer": "the physical spacing in numpy coordinate, only activate when using_physical_coord is true"
    },
    "tsk_set": {
        "batch_sz": "batch sz (only for mermaid related method, otherwise set to 1)",
        "check_best_model_period":"save best performed model every # epoch",
        "continue_train": "for network training method, continue training the model loaded from model_path",
        "continue_train_lr": "learning rate for continuing to train",
        "reset_train_epoch": "allow the training epoch to be reset or not",
        "load_model_but_train_from_epoch": "if reset_train_epoch is true, the epoch will be set as the given number",
        "criticUpdates": "for network training method, the num determines gradient update every # iter",
        "epoch": "num of training epoch",
        "gpu_ids": "the gpu id used for network methods",
        "loss": {
            "type": "the similarity measure type, support list: 'l1','mse','ncc','lncc'"
        },
        "max_batch_num_per_epoch": "max batch number per epoch for train|val|test|debug",
        "model": "the model type, mermaid_iter|reg_net|ants|demons|niftyreg",
        "model_path": "if continue_train, the model path should be given here",
        "n_in_channel": "for network training method, the color channel typically set to 1",
        "method_name": "MODEL: METHOD_NAME; mermaid_iter: affine, nonp; reg_net: affine_sym, mermaid; ants: affine, syn; niftyreg: affine, bspline; demons: demons",
        "optim": {
            "adam": {},
            "lr_scheduler": {
                "custom": {}
            }
        },
        "output_taking_original_image_format": "output follows the same sz and physical format of the original image (input by command line or txt)",
        "save_original_resol_by_type": "save_original_resol_by_type, should be a bool list to refer which image needs to be saved, each elements should refer to save_s, save_t, save_w, save_phi, save_w_inv, save_phi_inv, save_disp, save_extra",
        "path": {
            "__doc__": "record paths"
        },
        "reg": {
            "affine_net": {
                "acc_multi_step_loss": "accumulate loss at each step",
                "affine_net_iter": "num of step",
                "epoch_activate_extern_loss": "epoch to activate the external loss which will replace the default ncc loss",
                "epoch_activate_multi_step": "epoch to activate multi-step affine",
                "epoch_activate_sym": "epoch to activate symmetric forward",
                "epoch_activate_sym_loss": "the epoch to take symmetric loss into backward , only if epoch_activate_sym and epoch_activate_sym_loss",
                "lr_for_multi_step": "if reset_lr_for_multi_step, reset learning rate into # when multi-step begins",
                "initial_reg_factor": "initial regularization factor",
                "min_reg_factor": "minimum regularization factor",
                "sym_factor": "factor of symmetric loss",
                "reset_lr_for_multi_step": "if True, reset learning rate when multi-step begins",
                "using_complex_net": "use complex version of affine net"
            },
            "vm_cvpr": {
                "affine_init_path": "the path of pretrained affine model",
                "initial_reg_factor": "initial regularization factor",
                "min_reg_factor": "minimum of regularization factor",
                "affine_refine_step": "the multi-step num in affine refinement",
                "using_affine_init": "deploy affine network before the nonparametric network",
                "load_trained_affine_net": "if true load_trained_affine_net; if false, the affine network is not initialized"
            }
        },
        "save_running_resolution_3d_img": "saving fig",
        "save_extra_running_resolution_3d_img": "save extra image",
        "save_fig_on": "saving fig",
        "train": "if is in train mode",
        "use_physical_coord": "Keep physical spacing",
        "val_period": "do validation every num epoch",
        "warmming_up_epoch": "warming up the model in the first # epoch"
    }
}