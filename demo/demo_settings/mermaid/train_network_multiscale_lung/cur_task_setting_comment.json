{
    "dataset": {
        "img_after_resize": "image size after resampling",
        "load_init_weight": "load init weight for adaptive weighting model",
        "load_training_data_into_memory": "when train network, load all training sample into memory can relieve disk burden",
        "max_num_for_loading": "the max number of pairs to be loaded, set -1 if there is no constraint,[max_train, max_val, max_test, max_debug]",
        "spacing_to_refer": "the physical spacing in numpy coordinate, only activate when using_physical_coord is true",
        "task_type": "the task type, either 'reg' or 'seg'"
    },
    "tsk_set": {
        "batch_sz": "batch sz (only for mermaid related method, otherwise set to 1)",
        "continue_train": "for network training method, continue training the model loaded from model_path",
        "criticUpdates": "for network training method, the num determines gradient update every # iter",
        "gpu_ids": "the gpu id",
        "loss": {
            "type": "the similarity measure type, support list: 'l1','mse','ncc','lncc'"
        },
        "model_path": "if continue_train, the model path should be given here",
        "n_in_channel": "for network training method, the color channel typically set to 1",
        "optim": {
            "adam": {},
            "lr_scheduler": {
                "__doc__": "settings for learning scheduler",
                "custom": {
                    "gamma": "the factor for updateing the learning rate",
                    "step_size": "update the learning rate every # epoch"
                }
            }
        },
        "output_taking_original_image_format": "output follows the same sz and physical format of the original image (input by command line or txt)",
        "path": {
            "__doc__": "record paths"
        },
        "reg": {
            "affine_net": {
                "acc_multi_step_loss": "accumulate loss at each step",
                "affine_net_iter": "num of step",
                "epoch_activate_extern_loss": "epoch to activate the external loss which will replace the default ncc loss",
                "epoch_activate_multi_step": "epoch to activate multi-step affine",
                "epoch_activate_sym": "epoch to activate symmetric forward",
                "epoch_activate_sym_loss": "the epoch to take symmetric loss into backward , only if epoch_activate_sym and epoch_activate_sym_loss",
                "initial_reg_factor": "initial regularization factor",
                "lr_for_multi_step": "if reset_lr_for_multi_step, reset learning rate into # when multi-step begins",
                "min_reg_factor": "minimum regularization factor",
                "reset_lr_for_multi_step": "if True, reset learning rate when multi-step begins",
                "sym_factor": "the factor of symmetric loss",
                "using_complex_net": "use complex version of affine net"
            },
            "compute_inverse_map": "compute the inverse transformation map",
            "low_res_factor": "factor of low-resolution map",
            "mermaid_net": {
                "affine_init_path": "the path of trained affined network",
                "affine_refine_step": "the multi-step num in affine refinement",
                "clamp_momentum": "clamp_momentum",
                "clamp_thre": "clamp momentum into [-clamp_thre, clamp_thre]",
                "epoch_activate_multi_step": "epoch activate the multi-step",
                "epoch_activate_sym": "epoch activate the symmetric loss",
                "epoch_list_fixed_deep_smoother_network": "epoch_list_fixed_deep_smoother_network",
                "epoch_list_fixed_momentum_network": "list of epoch, fix the momentum network",
                "load_trained_affine_net": "if true load_trained_affine_net; if false, the affine network is not initialized",
                "lr_for_multi_step": "if reset_lr_for_multi_step, reset learning rate when multi-step begins",
                "mermaid_net_json_pth": "the path for mermaid settings json",
                "num_step": "compute multi-step loss",
                "optimize_momentum_network": "if true, optimize the momentum network",
                "reset_lr_for_multi_step": "if True, reset learning rate when multi-step begins",
                "sym_factor": "factor on symmetric loss",
                "using_affine_init": "if ture, deploy an affine network before mermaid-net",
                "using_complex_net": "using complex version of momentum generation network",
                "using_physical_coord": "use physical coordinate system"
            }
        },
        "save_running_resolution_3d_img": "saving fig",
        "save_extra_running_resolution_3d_img": "save extra image",
        "save_fig_on": "saving fig",
        "save_original_resol_by_type": "save_original_image_by_type, save_s, save_t, save_w, save_phi, save_w_inv, save_phi_inv, save_disp, save_extra",
        "seg": {
            "class_num": {}
        },
        "train": "if is in train mode",
        "use_physical_coord": "Keep physical spacing"
    }
}